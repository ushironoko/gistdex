name: Documentation Impact Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**/*.ts'
      - 'src/**/*.js'
      - '!src/**/*.test.ts'
      - '!src/**/*.spec.ts'

jobs:
  analyze-docs:
    name: Analyze Documentation Impact
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for diff analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.2.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.0.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Set up Google API Key
        run: echo "GOOGLE_GENERATIVE_AI_API_KEY=${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}" >> $GITHUB_ENV

      - name: Run documentation impact analysis
        id: doc-analysis
        run: |
          # Get the base branch (usually main or master)
          BASE_BRANCH="${{ github.base_ref }}"

          # Run the analysis comparing with base branch
          npx gistdex ci:doc \
            --diff "origin/${BASE_BRANCH}...HEAD" \
            --paths "docs/**/*.md,README.md,*.md" \
            --threshold 0.5 \
            --format json \
            > doc-impact.json

          # Store the result for the next step
          echo "has_impact=$(jq 'length > 0' doc-impact.json)" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: steps.doc-analysis.outputs.has_impact == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('doc-impact.json', 'utf8'));

            if (results.length === 0) return;

            // Group results by change type
            const byType = results.reduce((acc, r) => {
              acc[r.changeType] = acc[r.changeType] || [];
              acc[r.changeType].push(r);
              return acc;
            }, {});

            let comment = '## 📚 Documentation Impact Analysis\n\n';
            comment += `This PR may affect ${results.length} documentation file(s). Please review and update them if necessary.\n\n`;

            // Display results by change type
            for (const [type, docs] of Object.entries(byType)) {
              const emoji = {
                'added': '🆕',
                'modified': '📝',
                'deleted': '🗑️'
              }[type] || '📄';

              comment += `### ${emoji} ${type.charAt(0).toUpperCase() + type.slice(1)} Code\n\n`;

              docs.forEach(doc => {
                const similarity = (doc.similarity * 100).toFixed(1);
                comment += `- **${doc.file}** (${similarity}% relevance)\n`;

                if (doc.matchedTerms && doc.matchedTerms.length > 0) {
                  comment += `  - Related terms: \`${doc.matchedTerms.slice(0, 5).join('`, `')}\`\n`;
                }
              });

              comment += '\n';
            }

            comment += '---\n';
            comment += '_Generated by [Gistdex Documentation Impact Analysis](https://github.com/ushironoko/gistdex)_';

            // Post or update comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(c =>
              c.user.type === 'Bot' &&
              c.body.includes('Documentation Impact Analysis')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Upload analysis results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: doc-impact-analysis
          path: doc-impact.json
          retention-days: 7