#!/usr/bin/env tsx

import { readFileSync } from "node:fs";
import { argv, env, exit } from "node:process";

interface DocImpactAnalysis {
  timestamp: string;
  diffRange: string;
  threshold: number;
  impactCount: number;
  results: DocImpactResult[];
}

interface DocImpactResult {
  file: string;
  score: number;
  similarity?: number; // Add for backward compatibility
  matchedChunks: number;
  totalChunks: number;
  sections?: string[];
  matchedTerms?: string[]; // Add for matched terms display
  metadata?: Record<string, unknown>;
}

async function postGitHubComment(
  repository: string,
  issueNumber: number,
  comment: string,
  token: string,
): Promise<void> {
  const [owner, repo] = repository.split("/");
  const url = `https://api.github.com/repos/${owner}/${repo}/issues/${issueNumber}/comments`;

  const response = await fetch(url, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
      Accept: "application/vnd.github.v3+json",
    },
    body: JSON.stringify({ body: comment }),
  });

  if (!response.ok) {
    throw new Error(
      `Failed to post comment: ${response.status} ${response.statusText}`,
    );
  }
}

function formatComment(analysis: DocImpactAnalysis): string {
  let comment = "## ðŸ“š Documentation Impact Analysis\n\n";

  if (analysis.results.length === 0) {
    comment += "âœ… **No documentation impact detected**\n\n";
    comment += `- Analyzed diff range: \`${analysis.diffRange}\`\n`;
    comment += `- Threshold: ${(analysis.threshold * 100).toFixed(0)}%\n\n`;
    comment += "This PR does not appear to affect existing documentation.\n";
  } else {
    comment += "This PR may affect the following documentation:\n\n";

    for (const result of analysis.results) {
      // Use similarity if available, otherwise fall back to score
      const similarityScore = result.similarity ?? result.score;
      const percentage = (similarityScore * 100).toFixed(1);
      const emoji =
        similarityScore > 0.8 ? "ðŸ”´" : similarityScore > 0.6 ? "ðŸŸ¡" : "ðŸŸ¢";

      // Normalize file path (remove GitHub Actions workspace prefix if present)
      const normalizedPath = result.file
        .replace(/^\/home\/runner\/work\/[^/]+\/[^/]+\//, "")
        .replace(/^\//, "");

      comment += `### ${emoji} ${normalizedPath}\n`;
      comment += `- **Similarity Score**: ${percentage}%\n`;

      // Only show matched chunks if they have meaningful values
      if (result.matchedChunks > 0 || result.totalChunks > 0) {
        comment += `- **Matched Chunks**: ${result.matchedChunks}/${result.totalChunks}\n`;
      }

      // Show matched terms if available (better than sections for display)
      if (result.matchedTerms && result.matchedTerms.length > 0) {
        comment += `- **Matched Terms**: ${result.matchedTerms.slice(0, 5).join(", ")}`;
        if (result.matchedTerms.length > 5) {
          comment += ` (+${result.matchedTerms.length - 5} more)`;
        }
        comment += "\n";
      } else if (result.sections && result.sections.length > 0) {
        comment += `- **Relevant Sections**: ${result.sections.join(", ")}\n`;
      }

      comment += "\n";
    }

    comment += "---\n";
    comment +=
      "*Please review the affected documentation and update if necessary.*\n";
  }

  comment += "\n<sub>Generated by Gistdex CI</sub>";

  return comment;
}

async function main() {
  try {
    // Get input file from command line
    const inputFile = argv[2];
    if (!inputFile) {
      console.error("Usage: tsx post-github-comment.ts <input-file>");
      exit(1);
    }

    // Read and parse the analysis results
    const content = readFileSync(inputFile, "utf-8");
    const analysis = JSON.parse(content) as DocImpactAnalysis;

    // Always post a comment with the analysis results
    // (The workflow condition now controls when to run this)

    // Get environment variables
    const token = env.GITHUB_TOKEN;
    const repository = env.GITHUB_REPOSITORY;
    const issueNumber = env.GITHUB_ISSUE_NUMBER;

    if (!token || !repository || !issueNumber) {
      console.error(
        "Missing required environment variables: GITHUB_TOKEN, GITHUB_REPOSITORY, or GITHUB_ISSUE_NUMBER",
      );
      exit(1);
    }

    // Format and post the comment
    const comment = formatComment(analysis);
    await postGitHubComment(
      repository,
      Number.parseInt(issueNumber, 10),
      comment,
      token,
    );

    console.log(`Successfully posted comment to PR #${issueNumber}`);
    exit(0);
  } catch (error) {
    console.error("Error posting GitHub comment:", error);
    exit(1);
  }
}

main();
